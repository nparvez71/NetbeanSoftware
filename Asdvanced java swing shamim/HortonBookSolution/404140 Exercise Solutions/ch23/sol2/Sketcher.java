// Chapter 23 Exercise 2
/*
 Implement the XML Import capability in Sketcher using SAX, rather than DOM.
 */
/*
  The tricky part of this exercise is that with SAX we lose all the structure
  of a sketch in XML. We get each XML element separately, even though some elements
  are nested inside another. As a consequence we have to save data until we have enough
  to construct each sketch element.

  The creation of elements from XML is done in the SAXElementHandler inner class to SketcherFrame.
  The startElement() and endElement() methods are called when the start and end of an XML element
  are recognised. The startElement() method gathers data from any attributes for each XML element.
  The endElement() method creates subelements of sketch elements. It also creates the sketch elements
  from the objects and data items generated by startElement() and endElement.

  In the main, sketch elements can be created using exisitng constructors. The Element.Text class
  need a new constructor because data for the FontMetrics object for the text is not stored in the XML.

  The following changes were made to SketcherFrame:
  - deleted the inner class for DOM error handling
  - modified openXMLSketch() to use a SAX parser instead of a DOM parser.
  - added the SAXElementHandler inner class that handles SAX parser events.
  - added a constructor to the Element.Text class.
  - added import statements for SAX related names and java.util.Vector

  I did not delete or comment out all the DOM related code, so the methods involved in creating elements from
  Document nodes are still in the Element classes.
*/
// Sketching application
import javax.swing.*;
import java.awt.*;
import java.awt.event.*;

public class Sketcher {
  public static void main(String[] args) {
     theApp = new Sketcher();                                           // Create the application object
   SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                          theApp.createGUI();                           // Call GUI creator
            }
        });
  }

  // Method to create the application GUI
  private void createGUI() {
    window = new SketcherFrame("Sketcher", this);                       // Create the app window
    Toolkit theKit = window.getToolkit();                               // Get the window toolkit
    Dimension wndSize = theKit.getScreenSize();                         // Get screen size

    // Set the position to screen center & size to half screen size
    window.setSize(wndSize.width/2, wndSize.height/2);                  // Set window size
    window.setLocationRelativeTo(null);                                 // Center window

    window.addWindowListener(new WindowHandler());                      // Add window listener

    sketch = new SketcherModel();                                       // Create the model
    view = new SketcherView(this);                                      // Create the view
    sketch.addObserver(view);                                           // Register view with the model
    sketch.addObserver(window);                                         // Register window with the model
    window.getContentPane().add(view, BorderLayout.CENTER);
    window.setVisible(true);
  }

  // Return a reference to the application window
  public SketcherFrame getWindow() {
     return window;
  }

  // Return a reference to the model
  public SketcherModel getModel() {
     return sketch;
  }

  // Insert a new sketch model
  public void insertModel(SketcherModel newSketch) {
    sketch = newSketch;                                                 // Store the new sketch
    sketch.addObserver(view);                                           // Add the view as observer
    sketch.addObserver(window);                                         // Add the app window as observer
    view.repaint();                                                     // Repaint the view
  }

  // Return a reference to the view
  public SketcherView getView() {
     return view;
  }

  // Handler class for window events
  class WindowHandler extends WindowAdapter {
    // Handler for window closing event
    @Override
    public void windowClosing(WindowEvent e) {
      window.checkForSave();
    }
  }

  private SketcherModel sketch;                                         // The data model for the sketch
  private SketcherView view;                                            // The view of the sketch
  private SketcherFrame window;                                         // The application window
  private static Sketcher theApp;                                       // The application object
}